name: Deploy

on:
  push:
    branches: [main]

permissions:
  actions: write

env:
  ACT: false

jobs:
  predeploy:
    name: Predeploy Checks
    runs-on: ubuntu-latest

    outputs:
      hosts: ${{ steps.hosts.outputs.hosts }}
      users: ${{ steps.users.outputs.users }}
      run: ${{ steps.run.outputs.id }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup

      - name: Get Hosts
        id: hosts
        run: echo "hosts=$(nix eval --json --apply builtins.attrNames .#deploy.nodes)" >> "$GITHUB_OUTPUT"

      - name: Get Users
        id: users
        run: echo "users=$(nix eval --json --apply builtins.attrNames .#homeConfigurations | jq -c '[.[] | select(. | split("@")[1] | IN(${{ steps.hosts.outputs.hosts }}[]))]')" >> "$GITHUB_OUTPUT"

      - name: Get Run ID
        if: ${{ ! fromJSON(env.ACT) }}
        id: run
        env:
          GH_TOKEN: ${{ github.token}}
        run: echo "id=$(gh api -X GET /repos/${{ github.repository }}/actions/workflows/deploy.yaml/runs --jq '.workflow_runs[1].id')" >> "$GITHUB_OUTPUT"

      - name: Checks...
        uses: int128/wait-for-workflows-action@v1.37.0
        with:
          initial-delay-seconds: 0
          period-seconds: 5
          filter-workflow-names: |
            Check Inputs
            Format
            Prebuild

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to ${{ matrix.host }}
    environment: ${{ matrix.host }}

    needs: predeploy
    strategy:
      matrix:
        host: ${{ fromJSON(needs.predeploy.outputs.hosts) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          ts-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          ts-secret: ${{ secrets.TS_OAUTH_SECRET }}
          hostname: ${{ matrix.host }}
          ssh-key: ${{ fromJSON(env.ACT) && secrets.SSH_PRIVATE_KEY }}

      - name: Build & Deploy
        run: nix run nixpkgs#deploy-rs -- ${ACT:+--dry-activate} --skip-checks --remote-build .#${{ matrix.host }}

  nixos:
    name: Diff ${{ matrix.host }}
    runs-on: ubuntu-latest

    needs: [predeploy, deploy]
    strategy:
      matrix:
        host: ${{ fromJSON(needs.predeploy.outputs.hosts) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          ts-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          ts-secret: ${{ secrets.TS_OAUTH_SECRET }}
          hostname: ${{ matrix.host }}
          ssh-key: ${{ fromJSON(env.ACT) && secrets.SSH_PRIVATE_KEY }}

      - name: Get Generation File
        uses: actions/download-artifact@v4
        if: ${{ ! fromJSON(env.ACT) }}
        id: download
        with:
          name: generations-${{ matrix.host }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ needs.predeploy.outputs.run }}
        continue-on-error: true

      - name: Get Old Generation
        if: steps.download.outcome == 'success'
        id: old
        run: echo "gen=$(jq -r '.new' generations.json)" >> "$GITHUB_OUTPUT"

      - name: Get New Generation
        id: new
        env:
          PROFILE_DIR: /nix/var/nix/profiles
          PROFILE_NAME: system
        run: echo "gen=$(ssh root@${{ matrix.host }} ls ${{ env.PROFILE_DIR }} | sed 's/.*${{ env.PROFILE_NAME }}-\([0-9]*\)-link/\1/' | sort -n | tail -n 1)" >> "$GITHUB_OUTPUT"

      - name: Create Generations File
        id: create
        run: jq -n --arg old "${{ steps.old.outputs.gen || '' }}" --arg new "${{ steps.new.outputs.gen }}" '$ARGS.named' > generations.json

      - name: Upload Generations File
        uses: actions/upload-artifact@v4
        with:
          name: generations-${{ matrix.host }}
          path: generations.json

      - name: Create Diff
        id: diff
        env:
          OLD: /nix/var/nix/profiles/system-${{ steps.old.outputs.gen }}-link
          NEW: /nix/var/nix/profiles/system-${{ steps.new.outputs.gen }}-link
        run: |
          {
            echo 'diff<<EOF'
            ssh root@${{ matrix.host }} nix run nixpkgs#nvd -- diff ${{ env.OLD }} ${{ env.NEW }}
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Create Summary
        run: |
          {
            echo "\`\`\`"
            echo "${{ steps.diff.outputs.diff }})"
            echo "\`\`\`"
          } >> "$GITHUB_STEP_SUMMARY"

  home:
    name: Diff ${{ matrix.user }}
    runs-on: ubuntu-latest

    needs: [predeploy, deploy]
    strategy:
      matrix:
        user: ${{ fromJSON(needs.predeploy.outputs.users) }}

    steps:
      - name: Split User # https://github.com/actions/runner/issues/2125
        id: split
        run: |
          echo "user=$(echo ${{ matrix.user }} | awk -F'@' '{print $1}')" >> "$GITHUB_OUTPUT"
          echo "host=$(echo ${{ matrix.user }} | awk -F'@' '{print $2}')" >> "$GITHUB_OUTPUT"

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          ts-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          ts-secret: ${{ secrets.TS_OAUTH_SECRET }}
          hostname: ${{ steps.split.outputs.host }}
          ssh-key: ${{ fromJSON(env.ACT) && secrets.SSH_PRIVATE_KEY }}

      - name: Get Generation File
        uses: actions/download-artifact@v4
        if: ${{ ! fromJSON(env.ACT) }}
        id: download
        with:
          name: generations-${{ matrix.user }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ needs.predeploy.outputs.run }}
        continue-on-error: true

      - name: Get Old Generation
        if: steps.download.outcome == 'success'
        id: old
        run: echo "gen=$(jq -r '.new' generations.json)" >> "$GITHUB_OUTPUT"

      - name: Get New Generation
        id: new
        env:
          PROFILE_DIR: /home/${{ steps.split.outputs.user }}/.local/state/nix/profiles
          PROFILE_NAME: home-manager
        run: echo "gen=$(ssh root@${{ steps.split.outputs.host }} "ls ${{ env.PROFILE_DIR }} | sed 's/.*${{ env.PROFILE_NAME }}-\([0-9]*\)-link/\1/' | sort -n | tail -n 1")" >> "$GITHUB_OUTPUT"

      - name: Create Generations File
        id: create
        run: jq -n --arg old "${{ steps.old.outputs.gen || '' }}" --arg new "${{ steps.new.outputs.gen }}" '$ARGS.named' > generations.json

      - name: Upload Generations File
        uses: actions/upload-artifact@v4
        with:
          name: generations-${{ matrix.user }}
          path: generations.json

      - name: Create Diff
        id: diff
        env:
          OLD: /home/${{ steps.split.outputs.user }}/.local/state/nix/profiles/home-manager-${{ steps.old.outputs.gen }}-link
          NEW: /home/${{ steps.split.outputs.user }}/.local/state/nix/profiles/home-manager-${{ steps.new.outputs.gen }}-link
        run: |
          {
            echo 'diff<<EOF'
            ssh root@${{ steps.split.outputs.host }} nix run nixpkgs#nvd -- diff ${{ env.OLD }} ${{ env.NEW }}
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Create Summary
        run: |
          {
            echo "\`\`\`"
            echo "${{ steps.diff.outputs.diff }}"
            echo "\`\`\`"
          } >> "$GITHUB_STEP_SUMMARY"
